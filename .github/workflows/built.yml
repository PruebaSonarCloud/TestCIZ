name: Swift
description: Action for continuos integration
inputs:
   MIN_COVERAGE_VALUE:
    description: Minimum coverage value
    required: false
    default: 95
    type: integer
on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:

    runs-on: macos-14

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Sonar Scanner
      run: brew install sonar-scanner

    - name: Xcode Setup
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.3'
    
    - name: Build
      run: |
        set -o pipefail && xcodebuild build-for-testing -scheme TestCIZ -project TestCIZ.xcodeproj -destination "platform=iOS Simulator,OS=17.4,name=iPhone 14 Plus" -derivedDataPath Build/ -enableCodeCoverage YES | xcbeautify --renderer github-actions
    - name: Run tests
      run: |
        set -o pipefail && xcodebuild test-without-building -scheme TestCIZ -project TestCIZ.xcodeproj -destination "platform=iOS Simulator,OS=17.4,name=iPhone 14 Plus" -derivedDataPath Build/ -enableCodeCoverage YES | xcbeautify --renderer github-actions
    - name: Convert coverage report to SonarCloud format
      run: |
        chmod +x ./xccov-to-sonarqube-generic.sh
        ./xccov-to-sonarqube-generic.sh Build/Logs/Test/*.xcresult/ > sonarqube-generic-coverage.xml
    - name: Generate and upload code analysis report
      run: |
        sonar-scanner \
        -Dsonar.projectKey=PruebaSonarCloud_TestCIZ \
        -Dsonar.organization=pruebasonarcloud-2 \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
        -Dsonar.sources=. \
        -Dsonar.cfamily.build-wrapper-output.bypass=true \
        -Dsonar.coverageReportPaths=sonarqube-generic-coverage.xml \
        -Dsonar.c.file.suffixes=- \
        -Dsonar.cpp.file.suffixes=- \
        -Dsonar.objc.file.suffixes=- \
    - name: Install jq
      run: |
        brew install jq
    - name: Get sonarqube coverage history
      run: |
          # execute curl command and get the output value using jq
          coverage_value=$(curl -G --data-urlencode "component=TestCIZ" --data-urlencode "metrics=coverage" -s -u ${{ secrets.SONAR_TOKEN }}: https://sonarcloud.io/api/measures/search_history | jq -r '.measures[0].history[-1].value')
          bugs_vulnerability=$(curl -G --data-urlencode "componentKeys=TestCIZ" --data-urlencode "types=BUG,VULNERABILITY" --data-urlencode "statuses=OPEN,REOPENED" -s -u ${{ secrets.SONAR_TOKEN }}: https://sonarcloud.io/api/issues/search | jq -r '.total')
          hotspots=$(curl -G --data-urlencode "projectKey=TestCIZ" -s -u ${{ secrets.SONAR_TOKEN }}: https://sonarcloud.io/api/hotspots/search | jq -r '.paging.total')
          effort_total=$(curl -G --data-urlencode "componentKeys=TestCIZ" --data-urlencode "types=CODE_SMELL" --data-urlencode "statuses=OPEN,REOPENED" -s -u ${{ secrets.SONAR_TOKEN }}: https://sonarcloud.io/api/issues/search | jq -r '.effortTotal')
          # print the coverage value
          echo "COVERAGE_VALUE=$coverage_value" >> $GITHUB_ENV
          echo "BUGS_VALUE=$bugs_vulnerability" >> $GITHUB_ENV
          echo "HOTSPOTS_VALUE=$hotspots" >> $GITHUB_ENV
          echo "EFFORT_VALUE=$effort_total" >> $GITHUB_ENV
    - name: Check Coverage
      run: |
        result=$(awk -v n1=${{inputs.MIN_COVERAGE_VALUE}} -v n2="$COVERAGE_VALUE" 'BEGIN {print (n1 > n2)}')
        if [[ $result -eq 1 ]]; then
          echo "The minimun coverage is "${{ inputs.MIN_COVERAGE_VALUE }}" and you coverage is "${{ env.COVERAGE_VALUE }}
          exit 1
        else
          echo "Terrific! you coverage its over 95"
        fi
      

