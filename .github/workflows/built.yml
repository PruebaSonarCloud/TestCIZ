name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:

    runs-on: macos-14
    env:
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
      SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      MIN_COVERAGE_VALUE: 40
      MIN_BUGS_VALUE: 0
      MIN_HOTSPOTS_VALUE: 0
      MIN_EFFORT_VALUE: 60
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Sonar Scanner
      run: brew install sonar-scanner

    - name: Xcode Setup
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.3'
    
    
    - name: Install jq
      run: |
        brew install jq
    - name: Get sonarqube coverage history
      run: |
          # execute curl command and get the output value using jq
          echo "sonar token" ${{ secrets.SONAR_TOKEN }}
          coverage_value=$(curl -G --data-urlencode "component=$SONAR_PROJECT_KEY" --data-urlencode "metrics=coverage" -s -u ${{ secrets.SONAR_TOKEN }}: $SONAR_HOST_URL/api/measures/search_history | jq -r '.measures[0].history[-1].value')
          bugs_vulnerability=$(curl -G --data-urlencode "componentKeys=$SONAR_PROJECT_KEY" --data-urlencode "types=BUG,VULNERABILITY" --data-urlencode "statuses=OPEN,REOPENED" -s -u ${{ secrets.SONAR_TOKEN }}: $SONAR_HOST_URL/api/issues/search | jq -r '.total')
          hotspots=$(curl -G --data-urlencode "projectKey=$SONAR_PROJECT_KEY" -s -u ${{ secrets.SONAR_TOKEN }}: $SONAR_HOST_URL/api/hotspots/search | jq -r '.paging.total')
          effort_total=$(curl -G --data-urlencode "componentKeys=$SONAR_PROJECT_KEY" --data-urlencode "types=CODE_SMELL" --data-urlencode "statuses=OPEN,REOPENED" -s -u ${{ secrets.SONAR_TOKEN }}: $SONAR_HOST_URL/api/issues/search | jq -r '.effortTotal')
          # print the coverage value
          echo "COVERAGE_VALUE=$coverage_value" >> $GITHUB_ENV
          echo "BUGS_VALUE=$bugs_vulnerability" >> $GITHUB_ENV
          echo "HOTSPOTS_VALUE=$hotspots" >> $GITHUB_ENV
          echo "EFFORT_VALUE=$effort_total" >> $GITHUB_ENV
          
    - name: Check Coverage
      run: |
        echo "El coverage es "${{ env.COVERAGE_VALUE }}
        result=$(awk -v n1=$MIN_COVERAGE_VALUE -v n2="$COVERAGE_VALUE" 'BEGIN {print (n1 > n2)}')
        if [[ $result -eq 1 ]]; then
          echo "The minimun coverage is $MIN_COVERAGE_VALUE and you coverage is "${{ env.COVERAGE_VALUE }}
          exit 1
        else
          echo "Terrific! you coverage its over 95"
        fi
    - name: Check Bugs
      run: |
        
        result=$(awk -v n1="$BUGS_VALUE" -v n2=$MIN_BUGS_VALUE 'BEGIN {print (n1 > n2)}')
        echo "Result: $result"

        if [[ "$result" -eq 1 ]]; then
          echo "There are some bugs to review."
          echo "Number of bugs: $BUGS_VALUE"
          echo "Allowed bugs: $MIN_BUGS_VALUE"
          exit 1
        else
          echo "Terrific! Your bugs are okay."
        fi

      

